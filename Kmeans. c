#include <stdio.h>
#include<math.h>
#include<malloc.h>

// I defined maximum number of clusters as 15 and maximum number of iterations as 1000.
// This code belongs to k-mean clustering approach.It recommends books to a user based on which book is read most number of times in its cluster mates.

  
float dist(int d, float *p1, float *p2)        
{
 float dist,s=0;
 int i;
  for (i=0;i< d;i++)
    s += pow((p1[i] - p2[i]),2);
 
 dist=sqrt(s);

return dist;

} 


void calc_all_distances(int d, int n, int k, float *X, float *centroid, float *dist_array)   
{
 int i,j;
  for (i=0;i<n;i++)
   for (j=0;j<k;j++){
     dist_array[i*k + j] = dist(d, &X[i*d], &centroid[j*d]);
     }
}

  
float calc_tot_D(int d, int n, int k, float *X, float *centroids, int *cluster_assignment_index)  
{
 float tot_D = 0;
 int i,active_cluster;
  for (i=0;i<n;i++){
    active_cluster = cluster_assignment_index[i];
    if (active_cluster != -1)
      tot_D += dist(d, &X[i*d], &centroids[active_cluster*d]);
   }

return tot_D;
}

void cluster_assign(int d, int n, int k, float *distance_array, int *cluster_assignment_index) 
{
 int i,j;
 int index;
 float closest_distance,cur_distance;
  for (i=0;i<n;i++){
   index= -1;
   closest_distance = INFINITY;
  for ( j = 0; j < k; j++){
   cur_distance = distance_array[i*k + j];
   if (cur_distance < closest_distance){
     index= j;
     closest_distance = cur_distance;
     }
  }
cluster_assignment_index[i] =index;
}
}

void calc_cluster_centroids(int d, int n, int k, float *X, int *cluster_assignment_index, float *new_cluster_centroid)
{
  int cluster_member_count[15];
  int i,j,active_cluster;
   for (i = 0; i < k; i++) {
    cluster_member_count[i] = 0;
    for ( j = 0; j < d; j++)
    new_cluster_centroid[i*d + j] = 0;
   }
   for (i = 0; i < n; i++){
    active_cluster = cluster_assignment_index[i];
    cluster_member_count[active_cluster]++;
     for ( j = 0; j < d; j++)
      new_cluster_centroid[active_cluster*d + j] += X[i*d + j];
   }
   for (i = 0; i < k; i++) {
    if (cluster_member_count[i] == 0)
     printf(" Empty cluster %d! \n", i);
    for ( j = 0; j < d; j++)
     new_cluster_centroid[i*d + j] /= cluster_member_count[i];  
   }
}

void sort(int *c,int y)
{
 int i,j,k,l=0,m=0,max=0;
 while ( m < y){
  j=c[m];
  k=0;

  for(i=0;i<y;i++){
   if((c[i]==j) && (c[i]!=-1)){
    k++;
    }
   }
  if(k>max){
  max=k;
  l=m;
  }
 m++;
}
printf("the recommended book is %d \n",c[l]);

}


void get_cluster_member_count(int n, int k, int *cluster_assignment_index, int *cluster_member_count)
{
 int i;
   
 for ( i = 0; i < k; i++) 
  cluster_member_count[i] = 0;
  
   
 for (i = 0; i < n; i++)
  cluster_member_count[cluster_assignment_index[i]]++;
}
  
void cluster_out(int d, int n, int k, float *X, int *cluster_assignment_index, float *cluster_centroid)
{
int cluster_member_count[15];
int g=0,i,j,b[15],c[100],m,o,q,r;
float l;
get_cluster_member_count(n, k, cluster_assignment_index, cluster_member_count);
     
printf("  Final clusters \n");
 for ( i = 0; i < k; i++) 
  printf("    cluster %d:     members: %8d, centroid (%.1f %.1f)   \n", i, cluster_member_count[i], cluster_centroid[i*d + 0], cluster_centroid[i*d + 1]);
  
  printf("enter the uid for recommendation\n");
  scanf("%f",&l);
 for(m=0;m<15;m++)
  b[m]=0;

     for(m=0;m<100;m++)
     c[m]=-1;

    for( j=0;j<n;j++){
     if( X[d*j]==l){
        m=cluster_assignment_index[j];
        b[cluster_assignment_index[j]] ++;
}}
    /*for(m=0;m<15;m++){
    g += b[m];
    }*/
    
    for(m=0;m<15;m++){
      if(b[m]!=0){
      
      printf(" cluster num %d   given point is present %d in number \n",m,b[m]);
   for(i=0;i<n;i++){
     if(cluster_assignment_index[i]==m && X[i*d]!=l){
      c[i]=X[i*d+1];
  }}}}

 sort(c,n);
}

void copy_assignment_array(int n, int *src, int *tgt)
  {
    int i;
    for ( i = 0; i < n; i++)
      tgt[i] = src[i];
  }

  
int assignment_change_count(int n, int a[], int b[])

  {
    int change_count = 0;
    int i;
    for ( i = 0; i < n; i++)  
      if (a[i] != b[i])
        change_count++;
        
    return change_count;
  }


void main()
{

int  d=2,i=0;		                     // dimension of data 
float X[25];                                 // pointer to data
int   n=7;                                  // number of elements
int   k=2;                                  // number of clusters
float cluster_centroid[10];                // initial cluster centroids
int   *cluster_assignment_final;            // output
float initial_totD = INFINITY;
int z = 0;
int change_count;
             
printf("enter 7 points of 2 densions \n");
for(i=0;i<14;i++)
scanf("%f",&X[i]);
printf("enter cluster centroids 2 of 2d\n");
for(i=0;i<4;i++)
scanf("%f",&cluster_centroid[i]);
           
 
    float *dist                    = (float *)malloc(sizeof(float) * n * k);
    int   *cluster_assignment_cur  = (int *)malloc(sizeof(int) * n);
    int   *cluster_assignment_prev = (int *)malloc(sizeof(int) * n);
    
    
calc_all_distances(d, n, k, X, cluster_centroid, dist);         //calculate distances from all points to all centroids.

cluster_assign(d, n, k, dist, cluster_assignment_cur);          //assign points to thier nearest clusters(centroids)
   
copy_assignment_array(n, cluster_assignment_cur, cluster_assignment_prev);  
   
 while (z < 1000)                                              //maximum number of iterations - 1000.
{

calc_cluster_centroids(d, n, k, X, cluster_assignment_cur, cluster_centroid);  //calculate the new clusters' centroids.

float totD = calc_tot_D(d, n, k, X, cluster_centroid, cluster_assignment_cur); //calculate the sum of distances from all points to their respective centroids.

if (totD > initial_totD)
{
copy_assignment_array(n, cluster_assignment_prev, cluster_assignment_cur);  //finalise with the previous cluster assignment.

calc_cluster_centroids(d, n, k, X, cluster_assignment_cur, cluster_centroid);

printf("  negative progress made on this step - iteration completed");

break;
}

calc_all_distances(d, n, k, X, cluster_centroid, dist);            //distance array for new centroids.

cluster_assign(d, n, k, dist, cluster_assignment_cur);             //new cluster assignment.
         
int change_count = assignment_change_count(n, cluster_assignment_cur, cluster_assignment_prev);  //number of points which changed clusters.
        
if (change_count == 0)
{
printf("  no change made on this step - iteration completed \n");
printf("%d iteration\n",z);
break;

}

initial_totD = totD;
                        
z++;
}

cluster_out(d, n, k, X, cluster_assignment_cur, cluster_centroid);   //cluster diagram and recommendation.
    
}    
    
/*In this code the dimensions are the number of ways you want to classify the students like semster,genre,book etc.
for this test case I took only semster and book number as dimensions.hence 2.you can change the dimensions by input.*/
   
   
         



